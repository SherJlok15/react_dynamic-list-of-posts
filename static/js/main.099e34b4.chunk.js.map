{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","className","this","props","user","name","href","concat","email","address","city","street","suite","React","Component","Comment","body","CommentList","comments","map","item","components_Comment","key","id","Post","users","find","userId","postComments","filter","postId","title","text","components_User","components_CommentList","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loaded","request","posts","loadPosts","bind","assertThisInitialized","filterPosts","setState","e","target","value","_this2","xhrPosts","XMLHttpRequest","xhrUsers","xhrComments","open","addEventListener","parsedPosts","JSON","parse","response","parsedUsers","parsedComments","send","_this3","onClick","type","placeholder","onChange","post","components_Post","filtredPost","includes","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.099e34b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass User extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"user\">\r\n        <p className=\"user-name\">{this.props.user.name}</p>\r\n        <p className=\"user-email\"><a href={`mailto:${this.props.user.email}`}>{this.props.user.email}</a></p>\r\n        <p className=\"user-address\">Address : {this.props.user.address.city}, {this.props.user.address.street}, {this.props.user.address.suite}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react'\r\n\r\n\r\nclass Comment extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"comment\">\r\n        <h5 className=\"comment-name\">{this.props.name}</h5>\r\n        <p className=\"comment-email\"><a href={`mailto:${this.props.email}`}>{this.props.email}</a></p>\r\n        <p className=\"comment-body\">{this.props.body}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react'\r\nimport Comment from './Comment';\r\n\r\nfunction CommentList(props) {\r\n  return <div className=\"comments\">{props.comments.map(item => <Comment name={item.name} email={item.email} body={item.body} key={item.id}/>)}</div>\r\n  }\r\n\r\n\r\nexport default CommentList;\r\n","import React from 'react'\r\nimport User from './User'\r\nimport CommentList from './CommentList'\r\n\r\nfunction Post(props) {\r\n    const user = props.users.find(item => props.userId === item.id);\r\n    const postComments = props.comments.filter(item => props.id === item.postId);\r\n    return (\r\n      <div className=\"post\">\r\n        <h3 className=\"post-title\">{props.title}</h3>\r\n        <p className=\"post-text\">{props.text}</p>\r\n        <User user={user}/>\r\n        <CommentList comments={postComments}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react'\r\nimport Post from './Post'\r\n\r\nclass PostList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: false,\r\n      request: false,\r\n      posts: null,\r\n      users: null,\r\n      comments: null,\r\n      filter: null\r\n    }\r\n    this.loadPosts = this.loadPosts.bind(this);\r\n    this.filterPosts = this.filterPosts.bind(this);\r\n  }\r\n\r\n  loadPosts() {\r\n    this.setState({\r\n      request: true\r\n    })\r\n  }\r\n\r\n  filterPosts(e) {\r\n    this.setState({\r\n      filter: e.target.value\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    const xhrPosts = new XMLHttpRequest();\r\n    const xhrUsers = new XMLHttpRequest();\r\n    const xhrComments = new XMLHttpRequest();\r\n\r\n    xhrPosts.open('GET', 'https://jsonplaceholder.typicode.com/posts');\r\n    xhrUsers.open('GET', 'https://jsonplaceholder.typicode.com/users');\r\n    xhrComments.open('GET', 'https://jsonplaceholder.typicode.com/comments');\r\n\r\n    xhrPosts.addEventListener('load', () => {\r\n      const parsedPosts = JSON.parse(xhrPosts.response);\r\n      xhrUsers.addEventListener('load', () => {\r\n        const parsedUsers = JSON.parse(xhrUsers.response);\r\n        xhrComments.addEventListener('load', () => {\r\n          const parsedComments = JSON.parse(xhrComments.response);\r\n          this.setState({\r\n            loaded: true,\r\n            posts: parsedPosts,\r\n            users: parsedUsers,\r\n            comments: parsedComments\r\n          })\r\n        })\r\n        xhrComments.send()\r\n      })\r\n      xhrUsers.send();\r\n    })\r\n    xhrPosts.send();\r\n  }\r\n\r\n  render () {\r\n\r\n    if (!this.state.request){\r\n      return (\r\n        <div className=\"button-contaier\">\r\n          <button className=\"button\" onClick={this.loadPosts}>Download</button>\r\n        </div>\r\n      );\r\n    } else if (this.state.loaded) {\r\n\r\n      if (this.state.filter === null) {\r\n        return (\r\n          <div className=\"posts-contaier\">\r\n            <div className=\"input-contaier\">\r\n              <input type=\"text\" placeholder=\"Search\" onChange={this.filterPosts}/>\r\n            </div>\r\n            {this.state.posts.map(post =>\r\n              <Post title={post.title} text={post.body} users={this.state.users}\r\n               userId={post.userId} id={post.id} key={post.id} comments={this.state.comments}/>)}\r\n          </div>\r\n        );\r\n      } else if (this.state.filter !== null) {\r\n        const filtredPost =  this.state.posts.filter(post => {\r\n        return  post.title.includes(this.state.filter) || post.body.includes(this.state.filter)\r\n        })\r\n        return (\r\n          <div className=\"posts-contaier\">\r\n            <div className=\"input-contaier\">\r\n              <input type=\"text\" placeholder=\"Search\" onChange={this.filterPosts}/>\r\n            </div>\r\n            {filtredPost.map(post =>\r\n              <Post title={post.title} text={post.body} users={this.state.users}\r\n               userId={post.userId} id={post.id} key={post.id} comments={this.state.comments}/>)}\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      return <div>Loading...</div>\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList';\n\nfunction App() {\n  return (\n    <PostList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}